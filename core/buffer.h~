/*
 * Copyright (C) Reage
 * blog:http://www.rhttp.cn
 */

#ifndef _CORE_BUFFER_H_
#define _CORE_BUFFER_H_

#include <stdlib.h>

#define BUFFER_PIECE_SIZE 64/*Allocate memory base*/
#define BUFFER_ARRAY_SIZE 16/**/

typedef struct {
	char *ptr;

	size_t used;
	size_t size;
} buffer;

typedef struct {
	buffer **ptr;

	size_t used;
	size_t size;
} buffer_array;

typedef struct {
	char *ptr;
	size_t size;
} read_buffer;






read_buffer * read_buffer_init(pool_t *p);
read_buffer * read_buffer_init_str(char *b, size_t len);
void  read_buffer_get_string(char *s, read_buffer *b);
void  read_buffer_get_line(char *s, read_buffer *b);
buffer * buffer_init();
buffer* buffer_init_buffer(buffer *src);
buffer * buffer_init_string(char * str);
void  buffer_clear(buffer *b);
int buffer_prepare_int(pool_t *p, buffer * b, int size);
int buffer_append_string_buffer(buffer *b, const buffer *src);
int buffer_to_lower(buffer *b);
int buffer_to_upper(buffer *b);
int buffer_is_equal(buffer *a, buffer *b);
int buffer_caseless_compare(buffer *a, buffer *b);
int buffer_is_equal_len(buffer *a, buffer *b, size_t len);
int buffer_caseless_compare_len(buffer *a, buffer *b);
int buffer_path_simplify(buffer *dest, const buffer *src);
	

#endif
